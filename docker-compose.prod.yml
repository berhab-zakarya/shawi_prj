version: "3.8"

services:
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --replica-read-only no --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-elshawi_db}
      POSTGRES_USER: ${POSTGRES_USER:-elshawi_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-elshawi_pass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-elshawi_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    volumes:
      - ./logs:/app/logs
      - ./media:/app/media
      - ./static:/app/static
    env_file:
      - .env.prod
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"] 
      interval: 30s
      timeout: 10s
      retries: 3

  daphne:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    command: daphne -b 0.0.0.0 -p 8001 elshawi_backend.asgi:application
    volumes:
      - ./backend:/app
    env_file:
      - .env.prod
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    command: celery -A elshawi_backend worker --loglevel=info --concurrency=2
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
      - ./media:/app/media
    env_file:
      - .env.prod
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    command: celery -A elshawi_backend beat --loglevel=info
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    env_file:
      - .env.prod
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    networks:
      - app-network
    environment:
      - NODE_ENV=production

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/conf.d/default.conf
      - ./media:/app/media
      - ./static:/app/static
      - ./ssl:/etc/nginx/ssl  # For SSL certificates
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - app-network

  weaviate:
    image: semitechnologies/weaviate:latest
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      ENABLE_MODULES: ''
      DEFAULT_VECTORIZER_MODULE: 'none'
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - app-network

volumes:
  weaviate_data:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge