version: "3.8"

services:
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --replica-read-only no --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      cache_from:
        - elshawi/backend:latest
        - python:3.11-slim
    image: elshawi/backend:latest
    expose:
      - 8000
    volumes:
      - ./logs:/app/logs
      - ./media:/app/media
      - staticfiles_data:/app/staticfiles
    env_file:
      - .env.prod
    environment:
      - GUNICORN_WORKERS=3
      - GUNICORN_TIMEOUT=30
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/api/health/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  daphne:
    image: elshawi/backend:latest
    command: ["daphne", "-b", "0.0.0.0", "-p", "8001", "elshawi_backend.asgi:application"]
    expose:
      - 8001
    env_file:
      - .env.prod
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  celery_worker:
    image: elshawi/backend:latest
    command: ["celery", "-A", "elshawi_backend", "worker", "--loglevel=info", "--concurrency=2"]
    volumes:
      - ./logs:/app/logs
      - ./media:/app/media
    env_file:
      - .env.prod
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "celery -A elshawi_backend inspect ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  celery_beat:
    image: elshawi/backend:latest
    command: ["celery", "-A", "elshawi_backend", "beat", "--loglevel=info", "--pidfile=/tmp/celerybeat.pid"]
    volumes:
      - ./logs:/app/logs
      - celery_beat_data:/app/beat-schedule
    env_file:
      - .env.prod
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      cache_from:
        - elshawi/frontend:latest
        - node:18-alpine
    image: elshawi/frontend:latest
    restart: unless-stopped
    networks:
      - app-network
    environment:
      - NODE_ENV=production
    env_file:
      - .env.prod

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/conf.d/default.conf
      - ./media:/app/media
      - staticfiles_data:/app/staticfiles
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
      - daphne
    restart: unless-stopped
    networks:
      - app-network

  weaviate:
    image: semitechnologies/weaviate:latest
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      ENABLE_MODULES: ''
      DEFAULT_VECTORIZER_MODULE: 'none'
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - app-network

volumes:
  weaviate_data:
  postgres_data:
  redis_data:
  staticfiles_data:
  celery_beat_data:

networks:
  app-network:
    driver: bridge
