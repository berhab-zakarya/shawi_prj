name: üöÄ Deploy to Hostinger (Ultra Fast)

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.HOSTINGER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 31.97.182.92 >> ~/.ssh/known_hosts

      - name: Deploy to Hostinger
        run: |
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=3 root@31.97.182.92 << 'EOF'
            set -e

            echo "üöÄ Starting ultra-fast deployment..."

            REPO_DIR="/opt/elshawi_platform/shawi_prj"

            # Quick repository update
            if [ ! -d "$REPO_DIR" ]; then
              echo "üìÇ Creating project directory..."
              mkdir -p /opt/elshawi_platform
              cd /opt/elshawi_platform
              git clone --depth 1 https://github.com/berhab-zakarya/shawi_prj.git shawi_prj
            else
              echo "üîÑ Quick repository update..."
              cd "$REPO_DIR"
              # Only fetch what we need
              git fetch origin master --depth 1
              git reset --hard origin/master
            fi

            cd "$REPO_DIR"

            # Check if .env.prod exists
            if [ ! -f .env.prod ]; then
              echo "‚ùå .env.prod not found! Deployment aborted."
              exit 1
            fi

            echo "üîç Checking for actual changes..."
            # Get current running image IDs to compare
            CURRENT_BACKEND_ID=$(docker-compose -f docker-compose.prod.yml images -q backend 2>/dev/null || echo "none")
            
            # Build only if needed with maximum optimization
            echo "üèóÔ∏è Smart building with maximum cache..."
            
            echo "üî® Building with connection keepalive..."
            
            # Build backend first (usually smaller/faster)
            echo "üî® Building backend..."
            timeout 600 docker-compose -f docker-compose.prod.yml build backend || {
              echo "‚ùå Backend build failed or timed out"
              exit 1
            }

            # Build frontend with progress output to keep connection alive
            if [ -d "frontend" ]; then
              echo "üî® Building frontend (this may take a while)..."
              # Use nohup to prevent SSH disconnection from killing the build
              nohup timeout 900 docker-compose -f docker-compose.prod.yml build --progress=plain frontend > /tmp/frontend_build.log 2>&1 &
              BUILD_PID=$!
              
              # Monitor the build and keep connection alive
              while kill -0 $BUILD_PID 2>/dev/null; do
                echo "‚è≥ Frontend build in progress... $(date)"
                tail -5 /tmp/frontend_build.log 2>/dev/null || echo "Build log not ready yet"
                sleep 30
              done
              
              wait $BUILD_PID
              BUILD_EXIT_CODE=$?
              
              if [ $BUILD_EXIT_CODE -ne 0 ]; then
                echo "‚ùå Frontend build failed"
                tail -50 /tmp/frontend_build.log
                exit 1
              fi
              
              echo "‚úÖ Frontend build completed"
            fi

            echo "üîÑ Rolling update (zero-downtime)..."
            
            # Use rolling update strategy instead of stopping everything
            docker-compose -f docker-compose.prod.yml up -d --no-deps --remove-orphans
            
            # Quick health check (reduced timeout)
            echo "‚ö° Quick health check..."
            timeout 60 bash -c '
              while ! curl -f http://localhost/ >/dev/null 2>&1; do 
                sleep 2
                echo "Waiting for app..."
              done
            ' || {
              echo "‚ùå Quick health check failed, checking logs..."
              docker-compose -f docker-compose.prod.yml logs --tail=20 backend
              exit 1
            }

            # Clean up old unused images to save space (run in background)
            (docker image prune -f --filter "dangling=true" &) || true

            echo "‚úÖ Ultra-fast deployment completed!"
          EOF

      - name: Quick Verification
        run: |
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=3 root@31.97.182.92 << 'EOF'
            cd /opt/elshawi_platform/shawi_prj
            echo "üìä Service status:"
            docker-compose -f docker-compose.prod.yml ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
          EOF