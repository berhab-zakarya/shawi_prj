name: üöÄ Deploy to Hostinger (Ultra Fast)

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.HOSTINGER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 31.97.182.92 >> ~/.ssh/known_hosts

      - name: Deploy to Hostinger
        run: |
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=3 root@31.97.182.92 << 'EOF'
            set -e

            echo "üöÄ Starting ultra-fast deployment..."

            REPO_DIR="/opt/elshawi_platform/shawi_prj"

            # Quick repository update
            if [ ! -d "$REPO_DIR" ]; then
              echo "üìÇ Creating project directory..."
              mkdir -p /opt/elshawi_platform
              cd /opt/elshawi_platform
              git clone --depth 1 https://github.com/berhab-zakarya/shawi_prj.git shawi_prj
            else
              echo "üîÑ Quick repository update..."
              cd "$REPO_DIR"
              git fetch origin master --depth 1
              git reset --hard origin/master
            fi

            cd "$REPO_DIR"

            # Check if .env.prod exists
            if [ ! -f .env.prod ]; then
              echo "‚ùå .env.prod not found! Deployment aborted."
              exit 1
            fi

            # Check if SSL certificates exist
            if [ ! -f ssl/fullchain.pem ] || [ ! -f ssl/privkey.pem ]; then
              echo "‚ö†Ô∏è  SSL certificates not found. HTTPS might not work."
            fi

            # Check Docker Compose version
            if ! docker-compose --version >/dev/null 2>&1; then
              echo "‚ùå Docker Compose not found!"
              exit 1
            fi

            echo "üîç Checking for actual changes..."
            # Get current running image IDs to compare
            CURRENT_BACKEND_ID=$(docker-compose -f docker-compose.prod.yml images -q backend 2>/dev/null || echo "none")
            
            # Build only if needed with maximum optimization
            echo "üèóÔ∏è Smart building with maximum cache..."
            
            echo "üî® Building with optimized approach..."
            
            # Build backend first (usually faster)
            echo "üî® Building backend..."
            docker-compose -f docker-compose.prod.yml build backend

            # Build frontend with periodic output to keep connection alive
            if [ -d "frontend" ]; then
              echo "üî® Building frontend..."
              (
                docker-compose -f docker-compose.prod.yml build frontend &
                BUILD_PID=$!
                
                while kill -0 $BUILD_PID 2>/dev/null; do
                  echo "‚è≥ Still building frontend... $(date)"
                  sleep 30
                done
                
                wait $BUILD_PID
                echo $? > /tmp/build_exit_code
              ) 2>&1
              
              # Check build result
              BUILD_EXIT_CODE=$(cat /tmp/build_exit_code 2>/dev/null || echo "1")
              if [ "$BUILD_EXIT_CODE" -ne 0 ]; then
                echo "‚ùå Frontend build failed"
                exit 1
              fi
              echo "‚úÖ Frontend build completed"
            fi

            echo "üîÑ Rolling update (zero-downtime)..."
            
            # Stop problematic services first
            docker-compose -f docker-compose.prod.yml stop celery_beat || true
            
            # Use rolling update strategy
            docker-compose -f docker-compose.prod.yml up -d --no-deps --remove-orphans

            # Wait for services to be ready
            echo "‚è≥ Waiting for services to start..."
            sleep 10

            # Run migrations if needed
            echo "üìä Running database migrations..."
            docker-compose -f docker-compose.prod.yml exec -T backend python manage.py migrate --noinput || {
              echo "‚ùå Migration failed, but continuing..."
            }

            # Collect static files
            echo "üìÅ Collecting static files..."
            docker-compose -f docker-compose.prod.yml exec -T backend python manage.py collectstatic --noinput || {
              echo "‚ùå Static files collection failed, but continuing..."
            }

            # Enhanced health check
            echo "‚ö° Enhanced health check..."
            
            # Check backend health
            timeout 90 bash -c '
              while ! curl -f http://localhost/api/health/ >/dev/null 2>&1; do 
                sleep 3
                echo "Waiting for backend health endpoint..."
              done
            ' || {
              echo "‚ùå Backend health check failed, checking logs..."
              docker-compose -f docker-compose.prod.yml logs --tail=30 backend
              docker-compose -f docker-compose.prod.yml logs --tail=30 nginx
              exit 1
            }

            # Check if main page loads
            timeout 30 bash -c '
              while ! curl -f http://localhost/ >/dev/null 2>&1; do 
                sleep 2
                echo "Waiting for main page..."
              done
            ' || {
              echo "‚ùå Main page check failed, but backend is healthy"
            }

            # Check container health
            echo "üè• Checking container health..."
            UNHEALTHY=$(docker-compose -f docker-compose.prod.yml ps --filter "health=unhealthy" -q)
            if [ ! -z "$UNHEALTHY" ]; then
              echo "‚ö†Ô∏è  Some containers are unhealthy:"
              docker-compose -f docker-compose.prod.yml ps --filter "health=unhealthy"
            fi

            # Clean up old unused images to save space (run in background)
            (docker image prune -f --filter "dangling=true" &) || true

            echo "‚úÖ Ultra-fast deployment completed!"
          EOF

      - name: Comprehensive Verification
        run: |
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=3 root@31.97.182.92 << 'EOF'
            cd /opt/elshawi_platform/shawi_prj
            
            echo "üìä Service status:"
            docker-compose -f docker-compose.prod.yml ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
            
            echo ""
            echo "üè• Health status:"
            docker-compose -f docker-compose.prod.yml ps --format "table {{.Name}}\t{{.Status}}" | grep -E "(healthy|unhealthy)" || echo "No health status available"
            
            echo ""
            echo "üåê Quick connectivity test:"
            curl -s -o /dev/null -w "HTTP Status: %{http_code}\n" http://localhost/ || echo "Main page not accessible"
            curl -s -o /dev/null -w "API Health: %{http_code}\n" http://localhost/api/health/ || echo "API health not accessible"
            
            echo ""
            echo "üìä Resource usage:"
            docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" | head -10
          EOF