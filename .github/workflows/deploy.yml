name: Deploy Full Stack App to Azure

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: ${{ secrets.ACR_REGISTRY }}
  BACKEND_IMAGE_NAME: elshawi-backend
  FRONTEND_IMAGE_NAME: elshawi-frontend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Backend (Django) image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.prod
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}

    - name: Build and push Frontend (Next.js) image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile.prod
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}

    # Use Azure CLI with Access Token (temporary solution)
    - name: Azure Login using token
      run: |
        az login --access-token ${{ secrets.AZURE_ACCESS_TOKEN }} --tenant ${{ secrets.AZURE_TENANT_ID }}

    # Deploy Redis first (backend dependency)
    - name: Deploy Redis to Azure Container Instances  
      run: |
        az container create \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name elshawi-redis-${{ github.run_number }} \
          --image redis:7-alpine \
          --dns-name-label elshawi-redis-${{ github.run_number }} \
          --ports 6379 \
          --command-line "redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru" \
          --cpu 0.5 \
          --memory 0.5 \
          --location westeurope

    # Wait for Redis to be ready
    - name: Wait for Redis to be ready
      run: |
        echo "Waiting 30 seconds for Redis to start..."
        sleep 30

    - name: Deploy Backend to Azure Container Instances
      run: |
        az container create \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name elshawi-backend-${{ github.run_number }} \
          --image ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }} \
          --registry-login-server ${{ env.REGISTRY }} \
          --registry-username ${{ secrets.ACR_USERNAME }} \
          --registry-password ${{ secrets.ACR_PASSWORD }} \
          --dns-name-label elshawi-backend-${{ github.run_number }} \
          --ports 8000 \
          --environment-variables \
            DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" \
            DJANGO_DEBUG="False" \
            DJANGO_ALLOWED_HOSTS="elshawi-backend-${{ github.run_number }}.westeurope.azurecontainer.io,localhost" \
            REDIS_URL="elshawi-redis-${{ github.run_number }}.westeurope.azurecontainer.io:6379" \
            DATABASE_URL="sqlite:///db.sqlite3" \
            CORS_ALLOWED_ORIGINS="https://elshawi-frontend-${{ github.run_number }}.westeurope.azurecontainer.io" \
            GUNICORN_WORKERS="2" \
            GUNICORN_TIMEOUT="30" \
          --cpu 1 \
          --memory 2 \
          --location westeurope

    - name: Deploy Frontend to Azure Container Instances
      run: |
        az container create \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name elshawi-frontend-${{ github.run_number }} \
          --image ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }} \
          --registry-login-server ${{ env.REGISTRY }} \
          --registry-username ${{ secrets.ACR_USERNAME }} \
          --registry-password ${{ secrets.ACR_PASSWORD }} \
          --dns-name-label elshawi-frontend-${{ github.run_number }} \
          --ports 3000 \
          --environment-variables \
            NEXT_PUBLIC_API_URL="https://elshawi-backend-${{ github.run_number }}.westeurope.azurecontainer.io:8000" \
            NODE_ENV="production" \
          --cpu 1 \
          --memory 1.5 \
          --location westeurope

    - name: Get deployment URLs
      run: |
        echo "ðŸš€ Deployment Complete!"
        echo "=================================="
        echo "Backend API: https://elshawi-backend-${{ github.run_number }}.westeurope.azurecontainer.io:8000"
        echo "Frontend App: https://elshawi-frontend-${{ github.run_number }}.westeurope.azurecontainer.io:3000"
        echo "Admin Panel: https://elshawi-backend-${{ github.run_number }}.westeurope.azurecontainer.io:8000/admin/"
        echo "=================================="

    # Optional: Cleanup old deployments (keep last 2)
    - name: Cleanup old deployments
      run: |
        # Get list of old containers and delete them (keep last 2 deployments)
        OLD_CONTAINERS=$(az container list --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query "[?starts_with(name, 'elshawi-') && name != 'elshawi-backend-${{ github.run_number }}' && name != 'elshawi-frontend-${{ github.run_number }}' && name != 'elshawi-redis-${{ github.run_number }}'].name" -o tsv | head -n -4)
        for container in $OLD_CONTAINERS; do
          echo "Deleting old container: $container"
          az container delete --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name $container --yes --no-wait || true
        done