name: üöÄ Deploy Frontend Only (Next.js)

on:
  push:
    paths:
      - 'frontend/**'
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v3

      - name: üê≥ Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: üèóÔ∏è Build frontend only
        run: |
          echo "üõ†Ô∏è Building frontend..."
          docker-compose -f docker-compose.prod.yml build frontend

      - name: üöÄ Deploy frontend only
        run: |
          echo "üì¶ Recreating frontend container..."
          docker-compose -f docker-compose.prod.yml up -d --no-deps --build frontend

# name: üîÅ Reload Nginx Config

# on:
#   push:
#     paths:
#       - "nginx/**"
#       - ".github/workflows/deploy.yml"

# jobs:
#   reload-nginx:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Add SSH Key
#         run: |
#           mkdir -p ~/.ssh
#           echo "${{ secrets.HOSTINGER_SSH_KEY }}" > ~/.ssh/id_rsa
#           chmod 600 ~/.ssh/id_rsa
#           ssh-keyscan -H 31.97.182.92 >> ~/.ssh/known_hosts

#       - name: Reload NGINX on VPS
#         run: |
#           ssh -o StrictHostKeyChecking=no root@31.97.182.92 << 'EOF'
#             echo "üîÑ Reloading NGINX config..."
#             docker-compose -f /opt/elshawi_platform/shawi_prj/docker-compose.prod.yml exec nginx nginx -s reload
#             echo "‚úÖ NGINX reloaded"
#           EOF

# name: üöÄ Deploy to Hostinger (Ultra Fast)

# on:
#   push:
#     branches:
#       - master

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Add SSH key
#         run: |
#           mkdir -p ~/.ssh
#           echo "${{ secrets.HOSTINGER_SSH_KEY }}" > ~/.ssh/id_rsa
#           chmod 600 ~/.ssh/id_rsa
#           ssh-keyscan -H 31.97.182.92 >> ~/.ssh/known_hosts

#       - name: Deploy to Hostinger
#         run: |
#           ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=3 root@31.97.182.92 << 'EOF'
#             set -e

#             echo "üöÄ Starting ultra-fast deployment..."

#             REPO_DIR="/opt/elshawi_platform/shawi_prj"

#             # Quick repository update
#             if [ ! -d "$REPO_DIR" ]; then
#               echo "üìÇ Creating project directory..."
#               mkdir -p /opt/elshawi_platform
#               cd /opt/elshawi_platform
#               git clone --depth 1 https://github.com/berhab-zakarya/shawi_prj.git shawi_prj
#             else
#               echo "üîÑ Quick repository update..."
#               cd "$REPO_DIR"
#               # Only fetch what we need
#               git fetch origin master --depth 1
#               git reset --hard origin/master
#             fi

#             cd "$REPO_DIR"

#             # Check if .env.prod exists
#             if [ ! -f .env.prod ]; then
#               echo "‚ùå .env.prod not found! Deployment aborted."
#               exit 1
#             fi

#             echo "üîç Checking for actual changes..."
#             # Get current running image IDs to compare
#             CURRENT_BACKEND_ID=$(docker-compose -f docker-compose.prod.yml images -q backend 2>/dev/null || echo "none")
            
#             # Build only if needed with maximum optimization
#             echo "üèóÔ∏è Smart building with maximum cache..."
            
#             echo "üî® Building with optimized approach..."
            
#             # Build backend first (usually faster)
#             echo "üî® Building backend..."
#             docker-compose -f docker-compose.prod.yml build backend

#             # Build frontend with periodic output to keep connection alive
#             if [ -d "frontend" ]; then
#               echo "üî® Building frontend..."
#               # Use script to build with periodic keepalive
#               (
#                 docker-compose -f docker-compose.prod.yml build frontend &
#                 BUILD_PID=$!
                
#                 while kill -0 $BUILD_PID 2>/dev/null; do
#                   echo "‚è≥ Still building frontend... $(date)"
#                   sleep 30
#                 done
                
#                 wait $BUILD_PID
#                 echo $? > /tmp/build_exit_code
#               ) 2>&1
              
#               # Check build result
#               BUILD_EXIT_CODE=$(cat /tmp/build_exit_code 2>/dev/null || echo "1")
#               if [ "$BUILD_EXIT_CODE" -ne 0 ]; then
#                 echo "‚ùå Frontend build failed"
#                 exit 1
#               fi
#               echo "‚úÖ Frontend build completed"
#             fi

#             echo "üîÑ Rolling update (zero-downtime)..."
            
#             # Use rolling update strategy instead of stopping everything
#             docker-compose -f docker-compose.prod.yml up -d --no-deps --remove-orphans
            
#             # Quick health check (reduced timeout)
#             echo "‚ö° Quick health check..."
#             timeout 60 bash -c '
#               while ! curl -f http://localhost/ >/dev/null 2>&1; do 
#                 sleep 2
#                 echo "Waiting for app..."
#               done
#             ' || {
#               echo "‚ùå Quick health check failed, checking logs..."
#               docker-compose -f docker-compose.prod.yml logs --tail=20 backend
#               exit 1
#             }

#             # Clean up old unused images to save space (run in background)
#             (docker image prune -f --filter "dangling=true" &) || true

#             echo "‚úÖ Ultra-fast deployment completed!"
#           EOF

#       - name: Quick Verification
#         run: |
#           ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=3 root@31.97.182.92 << 'EOF'
#             cd /opt/elshawi_platform/shawi_prj
#             echo "üìä Service status:"
#             docker-compose -f docker-compose.prod.yml ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
#           EOF